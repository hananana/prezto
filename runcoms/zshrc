#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

export EDITOR='vim'

# too slow
# -------------------------------------
# SDKMAN
# -------------------------------------
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="$HOME/.sdkman"
# [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# -------------------------------------
# keybind&alias
# -------------------------------------

# ls
if [ -x "`which colorls`" ]; then
    alias ls="colorls -l -a -sd"
    alias l="colorls -l -a -sd"
else
    alias ls="ls -GF"
    alias l='ls -lah'
    alias la='ls -lAh'
fi

# git
alias g='git'
alias gf='git fetch --prune'
alias gfp='git fetch --prune'
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gcb='git checkout -b'
alias gco='git checkout'
alias gd='git diff'
alias gl='git pull --prune'
alias gm='git merge'
alias gp='git push'
alias gpu='git push -u origin $(git-current-branch-name)'
alias gst='git status'
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'

# tree
alias tree="tree -NC" # N: 文字化け対策, C:色をつける

# vim
alias vi="vim"

# tmux
alias tmux="TERM=screen-256color-bce tmux"

# 通知
alias notice='~/.dotfiles/bin/notice.sh'

# mux
alias mux="tmuxinator"

#oepn
alias o='open'

# 現在のbranch取得
function git-current-branch-name() {
    git branch | grep '^\*' | sed 's/^\* *//'
}

# ブランチを絞り込む
function git_branch(){
    local branch=$(git branch -a | fzy | tr -d ' ' | tr -d '*')
    if [ -n "$branch" ]; then
        if [ -n "$LBUFFER" ]; then
            local new_left="${LBUFFER%\ } $branch"
        else
            local new_left="$branch"
        fi
        BUFFER=${new_left}${RBUFFER}
        CURSOR=${#new_left}
    fi
}

#アプリを終了させる
function kill_process () {
    ps -ef | fzy | awk '{ print $2 }' | xargs kill
    zle clear-screen
}

# ハッシュを絞り込む
function git_hash(){                                    
    git log --oneline --branches | fzy | awk '{print $1}'
}  

# pathをみやすく
function show_path(){
      echo -e ${PATH//:/'\n'}
}

# gitグラフ描画
function graph {
	git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)― %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
}

# gitのrootに移動
function cd_gitroot() {

  local option OPTARG OPTIND
  while getopts ':h' option; do
    case $option in
      h)
        cdgitroot_print_usage
        return 0
        ;;
      :)
        cdgitroot_print_error "option requires an argument -- $OPTARG"
        return 1
        ;;
      *)
        cdgitroot_print_error "invalid option -- $OPTARG"
        return 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
    cdgitroot_print_error "Not in a git repository"
    return 1
  fi

  local relative_path="$1"
  local root_path=$(git rev-parse --show-toplevel)

  if [ -n "$relative_path" ]; then
    cd "$root_path/$relative_path"
  else
    cd "$root_path"
  fi
}

# ヒストリを絞り込む
function select_history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        fzy --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N select_history
bindkey '^r' select_history 

# -------------------------------------
# zgen
# -------------------------------------

source "${HOME}/.zgen/zgen.zsh"
zgen load b4b4r07/enhancd
ENHANCD_HOOK_AFTER_CD=l
zgen load zsh-users/zsh-syntax-highlighting
